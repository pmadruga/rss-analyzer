name: UI Tests - JSON Rendering

on:
  push:
    branches: [main]
    paths: 
      - 'docs/index.html'
      - 'tests/ui/**'
      - '.github/workflows/ui-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'docs/index.html'
      - 'tests/ui/**'
      - '.github/workflows/ui-tests.yml'
  workflow_dispatch: # Allow manual triggers

jobs:
  ui-tests:
    name: UI Tests for JSON Rendering
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: tests/ui

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: tests/ui/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install Puppeteer dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            ca-certificates \
            fonts-liberation \
            libappindicator3-1 \
            libasound2 \
            libatk-bridge2.0-0 \
            libatk1.0-0 \
            libc6 \
            libcairo2 \
            libcups2 \
            libdbus-1-3 \
            libexpat1 \
            libfontconfig1 \
            libgbm1 \
            libgcc1 \
            libglib2.0-0 \
            libgtk-3-0 \
            libnspr4 \
            libnss3 \
            libpango-1.0-0 \
            libpangocairo-1.0-0 \
            libstdc++6 \
            libx11-6 \
            libx11-xcb1 \
            libxcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxext6 \
            libxfixes3 \
            libxi6 \
            libxrandr2 \
            libxrender1 \
            libxss1 \
            libxtst6 \
            lsb-release \
            wget \
            xdg-utils

      - name: Run unit tests for JSON parsing functions
        run: npm run test:json-rendering

      - name: Run browser integration tests
        run: npm test -- browser-integration.test.js

      - name: Generate test coverage report
        run: npm run test:ci

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ui-test-coverage
          path: tests/ui/coverage/
          retention-days: 7

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Try to read coverage summary
            let coverageInfo = '';
            try {
              const coverageFile = path.join(process.cwd(), 'tests/ui/coverage/coverage-summary.json');
              if (fs.existsSync(coverageFile)) {
                const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
                coverageInfo = `
                **Test Coverage:**
                - Lines: ${coverage.total.lines.pct}%
                - Functions: ${coverage.total.functions.pct}%
                - Branches: ${coverage.total.branches.pct}%
                `;
              }
            } catch (e) {
              console.log('Could not read coverage file:', e.message);
            }

            const comment = `
            ## üß™ UI Test Results - JSON Rendering

            ‚úÖ All JSON rendering tests have passed!

            **What was tested:**
            - JSON content detection and parsing
            - Conversion of JSON keys to readable headers
            - Proper HTML structure generation
            - Nested object and array handling
            - Browser integration and user interaction
            - Fallback handling for malformed JSON

            ${coverageInfo}

            The website will now correctly display structured, readable content instead of raw JSON code.
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  json-content-validation:
    name: Validate JSON Content Structure
    runs-on: ubuntu-latest
    needs: ui-tests

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Test live website JSON processing
        run: |
          node -e "
          const https = require('https');
          
          console.log('Testing live website JSON processing...');
          
          https.get('https://pmadruga.github.io/rss-analyzer/data.json', (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => {
              try {
                const json = JSON.parse(data);
                const jsonArticles = json.articles.filter(a => 
                  a.analysis.startsWith('\`\`\`json') && a.analysis.endsWith('\`\`\`')
                );
                
                console.log(\`Total articles: \${json.articles.length}\`);
                console.log(\`JSON-formatted articles: \${jsonArticles.length}\`);
                console.log(\`Percentage JSON: \${(jsonArticles.length/json.articles.length*100).toFixed(1)}%\`);
                
                if (jsonArticles.length > 0) {
                  console.log('‚úÖ JSON articles detected - rendering functions will be used');
                  
                  // Test parsing one JSON article
                  const testArticle = jsonArticles[0];
                  const jsonContent = testArticle.analysis.slice(8, -4);
                  const parsed = JSON.parse(jsonContent);
                  
                  console.log(\`Sample article structure:\`);
                  console.log(\`- Has extracted_title: \${!!parsed.extracted_title}\`);
                  console.log(\`- Has analysis object: \${!!parsed.analysis}\`);
                  console.log(\`- Analysis keys: \${Object.keys(parsed.analysis || {}).length}\`);
                } else {
                  console.log('‚ÑπÔ∏è No JSON articles found - standard markdown processing will be used');
                }
              } catch (e) {
                console.error('‚ùå Error processing data:', e.message);
                process.exit(1);
              }
            });
          }).on('error', (e) => {
            console.error('‚ùå Error fetching data:', e.message);
            process.exit(1);
          });
          "

      - name: Test website accessibility
        run: |
          echo "üîç Testing website accessibility and JSON rendering..."
          curl -s https://pmadruga.github.io/rss-analyzer/ | grep -q "processAnalysisContent" && echo "‚úÖ JSON processing functions found in deployed site" || echo "‚ùå JSON processing functions not found"
          curl -s https://pmadruga.github.io/rss-analyzer/ | grep -q "formatJsonKeyAsTitle" && echo "‚úÖ Key formatting functions found in deployed site" || echo "‚ùå Key formatting functions not found"
          curl -s https://pmadruga.github.io/rss-analyzer/ | grep -q "convertGenericObjectToHtml" && echo "‚úÖ Object conversion functions found in deployed site" || echo "‚ùå Object conversion functions not found"