name: Test RSS Analyzer

on:
  schedule:
    # Run daily at 8:00 AM UTC
    - cron: '0 8 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Run in test mode (limited articles)'
        required: false
        default: true
        type: boolean

env:
  # Use minimal settings for testing
  MAX_ARTICLES_PER_RUN: ${{ github.event.inputs.test_mode == 'true' && '2' || '5' }}
  FOLLOW_LINKS: 'false'  # Disable for faster testing

  # API Configuration (same as main workflow)
  API_PROVIDER: 'mistral'
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  test-analyzer:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync

    - name: Lint with Ruff
      run: |
        echo "üîç Running Ruff linter..."
        uv run ruff check . --output-format=github
        echo "‚úÖ Linting completed"

    - name: Check formatting with Ruff
      run: |
        echo "üìù Checking code formatting..."
        uv run ruff format --check .
        echo "‚úÖ Formatting check completed"

    - name: Create test directories
      run: |
        mkdir -p data logs output

    - name: Test RSS parsing only
      run: |
        uv run python -c "
        from src.rss_parser import RSSParser
        parser = RSSParser()
        entries = parser.fetch_feed('https://bg.raindrop.io/rss/public/57118738')
        print(f'‚úÖ RSS parsing test: Found {len(entries)} entries')
        "

    - name: Test scraper only
      run: |
        uv run python -c "
        from src.scraper import WebScraper
        scraper = WebScraper()
        # Test with a known working URL
        result = scraper.scrape_article('https://jina.ai/news/quantization-aware-training-of-jina-embeddings-v4/', follow_links=False)
        print(f'‚úÖ Scraper test: {\"Success\" if result else \"Failed\"}')
        if result:
            print(f'   Content length: {len(result.content)} characters')
        "

    - name: Test database operations
      run: |
        uv run python -c "
        from src.database import DatabaseManager
        db = DatabaseManager('data/test.db')
        print('‚úÖ Database test: Initialized successfully')
        "

    - name: Run limited analysis
      run: |
        echo 'üìä Running limited RSS analysis...'
        uv run python -m src.main run --limit ${{ env.MAX_ARTICLES_PER_RUN }} || true

    - name: Generate test summary
      run: |
        uv run python -c "
        import os
        import sqlite3

        if os.path.exists('data/articles.db'):
            conn = sqlite3.connect('data/articles.db')
            cursor = conn.cursor()
            cursor.execute('SELECT COUNT(*) FROM articles')
            total = cursor.fetchone()[0]
            cursor.execute('SELECT COUNT(*) FROM articles WHERE status = \"completed\"')
            completed = cursor.fetchone()[0]
            conn.close()
            print(f'‚úÖ Test completed: {completed}/{total} articles processed')
        else:
            print('‚ÑπÔ∏è No database created (API limits or errors)')
        "

    - name: Validate outputs
      run: |
        echo 'üîç Checking output files...'

        if [ -f 'output/articles_by_date.md' ]; then
            echo '‚úÖ articles_by_date.md exists'
            wc -l output/articles_by_date.md
        else
            echo '‚ÑπÔ∏è articles_by_date.md not created'
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          data/
          output/
          logs/
        retention-days: 3

    - name: Trigger website data update
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'update-website.yml',
            ref: 'main',
            inputs: {
              force_regenerate: 'false'
            }
          });
          console.log('‚úÖ Triggered website data update workflow')
